library(jsonlite)
library(tidyverse)
library(effsize)
# specifies filepath to folder with data
file_paths <- c(
list.files(path = "./raw_sample_data", full.names = TRUE)
)
# specifies filepath to output data as one .csv file
output_file <- "./sampledata.csv"
process_csv_files <- function(file_paths, output_file) {
# Nested function to process a single file
process_file <- function(file_path) {
# Reads file
testdata <- read_csv(file_path, show_col_types = FALSE)
# Shortens file to specified columns
tdcols <- subset(testdata, select = -c(rt, stimulus, trial_type,
plugin_version, question_order))
# Shortens file to specified rows
tdrows <- tdcols[-c(1:13, 16:17), , drop = FALSE]
# Rearranges elements of cleaned data into one cohesive row
tdarrange <- data.frame(
check1 = tdrows$response[1],
check2 = tdrows$response[2],
cause = tdrows$causeDonation[3],
overhead = tdrows$expenseDonation[3],
total = tdrows$totalDonation[3],
condition = tdrows$questionOrder[3],
satis_usual = tdrows$response[4],
age = tdrows$age[5],
nationality = tdrows$nationality[5],
gender = tdrows$response[6],
comment = tdrows$response[7]
)
# Parses the satisfaction responses, unnests JSON formatting
tdparsed <- tdarrange %>%
mutate(satis_usual = lapply(satis_usual, function(x) {
tryCatch(fromJSON(x), error = function(e) NA)
}))
# Unnests the satisfaction/frequency column into two separate columns
tdsep <- tdparsed %>%
unnest_wider(col = satis_usual, names_sep = "_")
# Renames columns
tdclean <- tdsep %>%
rename(satisfaction = satis_usual_Q0,
frequency = satis_usual_Q1)
# Returns cleaned data
return(tdclean)
}
# Apply nested function to each file
processed_files <- lapply(file_paths, process_file)
# Combines files, adds identifying number
all_data <- bind_rows(processed_files, .id = "file_id")
# Saves the combined data
write_csv(all_data, output_file)
# Returns combined data
return(all_data)
}
result <- process_csv_files(file_paths, output_file)
head(result, 3)
# Function removes all of the special charcters from the data
remove_special_characters <- function(entry) {
gsub("[^a-zA-Z0-9\\s]", "", entry)
}
# Applies function to all relevant columns
cleanresult <- result %>%
mutate(check1 = sapply(check1, remove_special_characters)) %>%
mutate(check2 = sapply(check2, remove_special_characters)) %>%
mutate(condition = sapply(condition, remove_special_characters)) %>%
mutate(gender = sapply(gender, remove_special_characters)) %>%
mutate(comment = sapply(comment, remove_special_characters))
# Edits data for legibility
cleanresult <- cleanresult %>%
mutate(
condition = recode(condition,
ForthecauseForcoveringcharitableorganizationsoperatingexpense = 'causefirst',
ForcoveringcharitableorganizationsoperatingexpenseForthecause = 'overfirst'
),
check1 = gsub("chanceresponse", "", check1),
check2 = gsub("donationuseresponse", "", check2),
gender = gsub("gender", "", gender),
comment = gsub("Q0", "", comment)
)
head(cleanresult, 3)
# Leaves only participants who answered correctly
filterresult <- cleanresult[cleanresult$check1 == 20
& cleanresult$check2 == "Alloftheabove", ]
# Creates a new spreadsheet
write_csv(filterresult, "./filteredsampledata.csv")
head(filterresult, 3)
# Necessary for enabling Cohen's D calculations
splitdata <- split(filterresult, filterresult$condition)
head(splitdata$overfirst, 3)
head(splitdata$causefirst, 3)
# Regression model
summary(lm('total ~ condition + age + gender',
data = filterresult))
# Table of summary statistics among conditions
print(
data.frame(
Statistic = c("Mean", "Standard Deviation"),
Overhead = c(round(mean(splitdata$overfirst$total), 2),
round(sd(splitdata$overfirst$total), 2)),
Cause = c(round(mean(splitdata$causefirst$total), 2),
round(sd(splitdata$causefirst$total), 2))
))
# Cohen's D calculation
cohen.d(splitdata$overfirst$total, splitdata$causefirst$total)
# Regression model
summary(lm('overhead ~ condition + age + gender',
data = filterresult))
# Table of summary statistics among conditions
print(
data.frame(
Statistic = c("Mean", "Standard Deviation"),
Overhead = c(round(mean(splitdata$overfirst$overhead), 2),
round(sd(splitdata$overfirst$overhead), 2)),
Cause = c(round(mean(splitdata$causefirst$overhead), 2),
round(sd(splitdata$causefirst$overhead), 2))
))
# Cohen's D calculation
cohen.d(splitdata$overfirst$overhead, splitdata$causefirst$overhead)
# Regression model
summary(lm('cause ~ condition + age + gender',
data = filterresult))
# Table of summary statistics among conditions
print(
data.frame(
Statistic = c("Mean", "Standard Deviation"),
Overhead = c(round(mean(splitdata$overfirst$cause), 2),
round(sd(splitdata$overfirst$cause), 2)),
Cause = c(round(mean(splitdata$causefirst$cause), 2),
round(sd(splitdata$causefirst$cause), 2))
))
# Cohen's D calculation
cohen.d(splitdata$overfirst$cause, splitdata$causefirst$cause)
# Calculates means and standard errors for donation amounts among both conditions
summary_data <- filterresult %>%
group_by(condition) %>%
summarise(
total_mean = mean(total),
total_se = sd(total) / sqrt(n()),
cause_mean = mean(cause),
cause_se = sd(cause) / sqrt(n()),
overhead_mean = mean(overhead),
overhead_se = sd(overhead) / sqrt(n())
) %>%
# Shapes data for ease of use in ggplot
pivot_longer(
cols = -condition,
names_to = c("category", ".value"),
names_sep = "_"
)
summary_data$category <- factor(summary_data$category,
levels = c("total", "cause", "overhead"))
# Creates base for plot
ggplot(summary_data, aes(x = category, y = mean, fill = condition)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.4),
width = 0.4, color = "gray20") +
# Adds error bars
geom_errorbar(aes(ymin = mean - se, ymax = mean + se),
position = position_dodge(width = 0.4),
width = 0.2, color = "gray20") +
# Specifies aesthetics for color and label
scale_fill_manual(
values = c("causefirst" = "white", "overfirst" = "gray"),
labels = c("Cause First", "Overhead First")) +
labs(
title = "Comparison of Donation Collection Methods",
x = "Donation collection method",
y = "Amount ($)",
fill = "Condition"
) +
# Specifies axes
scale_y_continuous(
expand = c(0, 0),
limits = c(0, 2.25),
breaks = seq(0, 2.25, .5)
) +
# Specifies style
theme_minimal() +
theme(
legend.position.inside = c(0.9, 0.9),
panel.background = element_rect(fill = "white", color = "gray20"),
plot.background = element_rect(fill = "white", color = NA)
)
# Regression model
summary(lm('satisfaction ~ condition',
data = filterresult))
# Regression model
summary(lm('satisfaction ~ condition + age + gender',
data = filterresult))
# Regression model
summary(lm('satisfaction ~ condition + age + gender + cause + overhead',
data = filterresult))
# Visualization of donation counts for overheads first condition
ggplot(splitdata$overfirst, aes(x = total)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
labs(title = "Distribution of Total Donations (overheads first condition)",
x = "Total Donation Amount",
y = "Frequency") +
scale_y_continuous(
limits = c(0, 35),
breaks = seq(0, 30, by = 5)
) +
theme_minimal()
# Visualization of donation counts for cause first condition
ggplot(splitdata$causefirst, aes(x = total)) +
geom_histogram(binwidth = 1, fill = "grey", color = "black") +
labs(title = "Distribution of Total Donations (cause first condition)",
x = "Total Donation Amount",
y = "Frequency") +
scale_y_continuous(
limits = c(0, 35),
breaks = seq(0, 30, by = 5)
) +
theme_minimal()
# Summary statistics (1 = our sample, 2 = original sample)
m1 = (mean(filterresult$total)/5)
m2 = 3.4
sd1 = sd(filterresult$total)
sd2 = 2.13
n1 = 136
n2 = 143
# Z-statistic calculation
z_stat <- (m1 - m2) / sqrt((sd1^2)/n1 + (sd2^2)/n2)
# P-value calculation
p_value <- 2 * (1 - pnorm(abs(z_stat)))
cat("z-statistic:", z_stat, "\n")
cat("p-value:", p_value, "\n")
# Assessment of people in each condition who donated nothing
zeroresult <- filterresult[filterresult$total == 0, ]
table(zeroresult$condition)
cat("Proportion of non-donors in overheads first condition:",
round(table(zeroresult$condition)[2]/65, 3), "\n")
cat("Proportion of non-donors in cause first condition:",
round(table(zeroresult$condition)[1]/71, 3), "\n")
# Creates a table of frequencies
observed <- matrix(c(30, 41, 24, 41), nrow = 2, byrow = TRUE)
rownames(observed) <- c("Cause First", "Overheads First")
colnames(observed) <- c("Donated Nothing", "Donated Something")
# Calculates Chi-squared test
chisq.test(observed)
sessionInfo()
